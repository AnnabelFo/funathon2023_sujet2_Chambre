---
title: "Sujet2-Etape1"
format: html
# embed-resources: true
# standalone: true
self-contained: true
toc: true
toc-depth: 3
number-sections: true
toc-location: left
css: styles.css
theme: united
editor: visual
output-file: Sujet2-Etape1.html
---

```{r setup, include=FALSE}
#| label: setup
#| echo: false

library(tidyverse) 
library(aws.s3)
library(sf)
library(RPostgreSQL)
library(janitor)
if (!"kableExtra" %in% installed.packages()) { install.packages("kableExtra") }
library(kableExtra)
library(leaflet)
library(htmlwidgets)
library(RColorBrewer)

# données -----------------------------------------------------------------
aws.s3::get_bucket("projet-funathon", region = "",  prefix = "2023/sujet2/diffusion/ign/rpg")

```

```{r }
#| echo: false
#| label: lecture libellés groupes cultures

lib_cult<-s3read_using(FUN = read_csv2, 
                         object = "2023/sujet2/diffusion/ign/rpg/REF_CULTURES_GROUPES_CULTURES_2020.csv",
                         col_types = cols(.default = col_character()),
                         bucket = "projet-funathon",
                         opts = list("region" = "")) %>% clean_names() 

lib_group_cult<-lib_cult %>% 
  select(code_groupe_culture,libelle_groupe_culture) %>% 
  distinct(code_groupe_culture,.keep_all=T)


```

## Etape 1 : Première manipulation du RPG

### Je choisis un point sur la carte : <https://www.google.fr/maps>

=\> clic droit sur la carte + clic gauche sur les coordonnées (copiées dans le presse-papier)

J'indique un rayon en mètres (\< 15000) pour sélectionner les parcelles autour du point

```{r}
#| label: choix coordonnées + rayon
#| echo: false
# coord_gmaps<- rstudioapi::showPrompt(title = "Collez les coordonnées", message = "coordonnées Gmaps", default = "")
coord_gmaps<-"46.46946179131805, -1.4932577154775046"
lat<-as.numeric(str_split(coord_gmaps,fixed(","),simplify = TRUE)[,1])
lon<-as.numeric(str_split(coord_gmaps,fixed(","),simplify = TRUE)[,2])
# rayon<-as.numeric(rstudioapi::showPrompt(title = "Rayon", message = "Rayon (en m)", default = ""))
rayon<-5000

# création d'une table sf «point» avec les coordonnées saisies
# transformation des coordonnées en syst de proj 2154 (Lambert II - Français) 
point<-data.frame(lon,lat,rayon) %>% 
  st_as_sf(coords = c("lon","lat"),crs = "EPSG:4326") %>%
  mutate(coord_pt_gps=st_as_text(geometry)) %>% 
  st_transform("EPSG:2154") %>% 
  st_sf() %>% clean_names() %>% 
  rename(geom=geometry)

# st_crs(point)
# st_geometry_type(point)
# plot(point)
```

La table des parcelles agricoles 2021 se trouve sur un serveur PostgreSQL/PostGIS.

### Je me connecte au serveur PostgreSQL avec le mot de passe disponible sur Onyxia/Mes services/PostgreSQL/Read me

```{r}
#| echo: false
#| label: connection PostGis

# le mot de passe est stocké dans un secret Vault

# postgresql_password <- rstudioapi::askForPassword(prompt = "Entrez le password PostgreSQL")
postgresql_password <- "1tfawt3nj7fgzo3w7cma"
  
# Connection à PostgreSQL
cnx <- dbConnect(PostgreSQL(),
                user = "projet-funathon",
                password = postgresql_password,
                host = "postgresql-438832",
                dbname = "defaultdb",
                port = 5432,
                options="-c search_path=rpg,public") # specify what schema to connect to
                 
```

### je lance une requête SQL pour sélectionner les parcelles situées autour de mon point dans le rayon choisi.

```{r}
#| echo: false
#| label: requete SQL selection parcelles

# suppression de la table «point» si elle existe
dbSendQuery(cnx,"DROP TABLE IF EXISTS rpg.point CASCADE;")

# écriture de la table point dans la base PostGis
write_sf(point, cnx, append = T)

# ajout d'une clé primaire
dbSendQuery(cnx,"ALTER TABLE rpg.point ADD CONSTRAINT point_pkey PRIMARY KEY(coord_pt_gps);")

# ajout d'un index
dbSendQuery(cnx,"CREATE INDEX ON rpg.point USING gist(geom);")
# dbExecute(cnx,"CREATE INDEX ON rpg.point USING gist(geom);")

# 3 - Exécution de la requête de découpage du RPG autour du point sur PostGis  -------

dbSendQuery(cnx,"DROP TABLE IF EXISTS rpg.parc_prox CASCADE;")

dbSendQuery(cnx,"CREATE TABLE rpg.parc_prox AS
	SELECT row_number() OVER () AS row_id, p.coord_pt_gps, p.rayon, r.*  
	FROM rpg.point p, rpg.parcelles r 
	WHERE ST_DWithin(p.geom,r.geom,p.rayon);")

# ajout d'une clé primaire
dbSendQuery(cnx,"ALTER TABLE rpg.parc_prox ADD CONSTRAINT parc_prox_pk PRIMARY KEY(id_parcel);")

# ajout d'un index
dbSendQuery(cnx,"CREATE INDEX parc_prox_geom_idx ON rpg.parc_prox USING gist(geom);")


# 4 - Téléchargement des parcelles proches sous R-------------------------------

# parc_prox<-read_sf(cnx,parc_prox)

parc_prox<-st_read(cnx, query="select * from rpg.parc_prox;")

```

### J'affiche les parcelles autour de mon point avec une carte interactive leaflet

```{r}
#| echo: false
#| label: affichage parcelles

plot(st_geometry(parc_prox))
plot(st_geometry(point),add = T,col = "red")

# Transformation de la projection car leaflet ne connait que le WGS 84
carte_parc_prox<- parc_prox %>% st_transform(4326)

# Marqueur du point
pt_mark<- point %>% st_transform(4326)

# ajout du libellé des cultures
carte_parc_prox_lib<-carte_parc_prox %>% 
  left_join(lib_cult %>% select(-code_groupe_culture),by=c("code_cultu"="code_culture")) 
#création d'un label ad hoc à afficher en surbrillance au passage de la souris sur la carte.
labels<-sprintf("<strong>id_parcel : </strong>%s<br/>
                <strong>Groupe culture : </strong>%s<br/>
                <strong>Culture : </strong>%s<br/>
                <strong>Surface (ha) : </strong>%s<br/>
                <strong>Département : </strong>%s<br/>
                <strong>Commune : </strong>%s<br/>",
                parc_prox$id_parcel,carte_parc_prox_lib$libelle_groupe_culture,
                carte_parc_prox_lib$libelle_culture,parc_prox$surf_parc,
                parc_prox$insee_dep,parc_prox$nom_com) %>% 
  lapply(htmltools::HTML)

# labels

# création d'une palette de couleurs associée au groupe de culture
factpal <- colorFactor("Paired", parc_prox$code_group)

carte_parc_prox_html <- leaflet(carte_parc_prox_lib) %>% 
   # addProviderTiles("Esri.WorldImagery") %>%
   # addTiles() %>% 
  addTiles("http://wxs.ign.fr/essentiels/wmts?REQUEST=GetTile&SERVICE=WMTS&VERSION=1.0.0&STYLE=normal&TILEMATRIXSET=PM&FORMAT=image/jpeg&LAYER=ORTHOIMAGERY.ORTHOPHOTOS&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}") %>%
  addPolygons( #fillColor="white",
               fillColor=~factpal(code_group),
               weight = 2,
               opacity = 1,
               color = "#ffd966",
               dashArray = "3",
               fillOpacity = 0.5,
               highlight = highlightOptions(
                 weight = 5,
                 color = "#A40000",
                 dashArray = "",
                 fillOpacity = 0.0,
                 bringToFront = TRUE),
               label = labels,
               labelOptions = labelOptions(
                 style = list("font-weight" = "normal", padding = "3px 8px"),
                 textsize = "15px",
                 direction = "auto",
                 encoding="UTF-8")) %>% 
  addMarkers(data=pt_mark,~lon,~lat, popup = ~coord_pt_gps, label = ~coord_pt_gps)

# leaflet(pt_mark) %>% addTiles() %>% addMarkers(~lon,~lat)

carte_parc_prox_html
# saveWidget(widget = carte_parc_prox_html, file = "carte_parc_prox_html.html")

```

### Quelle est la structure des parcelles agricoles autour de mon point ?

```{r}
#| echo: false
#| label: stats sur les groupes de cultures 
#| tbl-cap: Structure des cultures au niveau local 

t1 <- parc_prox %>% st_drop_geometry() %>% count(code_group) %>% 
  add_tally(n) %>% 
  mutate(n_pct=round(100*n/nn,1)) %>% 
  select(-nn) %>% rename(n_parcelles=n) %>%
  # adorn_totals() %>% 
cbind(
  # comptage des surfaces
parc_prox %>% st_drop_geometry() %>% count(code_group,wt=surf_parc) %>% 
      add_tally(n) %>% 
      mutate(surf_pct=round(100*n/nn,1)) %>%
      select(-nn) %>%  
      rename(surf_parc_ha=n) %>% select(surf_parc_ha, surf_pct) # %>% 
       # adorn_totals()
) %>% left_join(lib_group_cult,by=c("code_group"="code_groupe_culture")) %>% 
  select(code_group,libelle_groupe_culture,everything()) %>% 
  # arrange(as.numeric(code_group)) %>% 
  arrange(desc(surf_parc_ha)) %>% 
  adorn_totals() %>% 
  mutate(taille_moy_parc=round(surf_parc_ha/n_parcelles,1))

t1  %>% 
  setNames(c("code","groupe de cultures","nombre de parcelles","(%)","surface (ha)","surface (%)","taille moyenne (ha)")) %>% 
  kable(
    format="html",
    caption="<span style='font-size:medium'>Groupes de cultures <strong>locales</strong> par surfaces décroissantes</span>",
    format.args = list(decimal.mark = ",", big.mark = " "),
    booktabs = TRUE) %>%
  kable_styling(font_size = 15) %>% 
  gsub("font-size: initial !important;",
       "font-size: 20pt !important;",.)%>%
  kable_styling(bootstrap_options = c("striped", "hover")) %>% 
  row_spec(nrow(t1), bold = T, color = "white", background = "grey")

# rm(t1)
```

### Comparaison avec la répartition des cultures au niveau départemental et national

```{r}
#| label: comparaison structure départementale et nationale 
#| echo: false
#| tbl-cap: Structure des cultures 

# jointure spatiale avec la couche département pour récupérer le département où tombe le point

# ouvrir la couche des communes (à convertir en Lambert II epsg 2154)
dep <- s3read_using(
    FUN = sf::read_sf,
    layer = "departement",
    object = "2023/sujet2/diffusion/ign/adminexpress_cog_simpl_000_2023.gpkg",
    bucket = "projet-funathon",
    opts = list("region" = "")) %>% 
  st_transform(2154)

# jointure
df<-point %>% st_join(dep) %>% st_drop_geometry() %>% select(insee_dep)
dep_pt<-df[1,1]
rm(df)

# sinon sélection du département regroupant la plus grande surface agricole
# cas où le cercle recouvre plusieurs départements
# df<-parc_prox %>% st_drop_geometry() %>% 
#   count(insee_dep,wt=surf_parc) %>% 
#   arrange(desc(n))
# dep_pt<-df[1,1]
# rm(df)

# calcul des % surfaces autour du point
stat_pt <- parc_prox %>% st_drop_geometry() %>% 
  count(code_group,wt=surf_parc) %>% add_tally(n) %>% 
  mutate(pct_surf_local=round(100*n/nn,1)) %>%
  select(code_group, pct_surf_local) 

# récup des % surfaces départementales
stat_dep_pt<-s3read_using(
  FUN=readr::read_rds,
  object = "2023/sujet2/diffusion/resultats/stat_group_cult_by_dep.rds",
  bucket = "projet-funathon",
  opts = list("region" = "")) %>% 
  filter(insee_dep %in% dep_pt) %>% 
  select(insee_dep,code_group,libelle_groupe_culture,pct_surf) %>% 
  rename(pct_surf_dep = pct_surf)

# récup des % surfaces nationales
stat_fm<-s3read_using(
  FUN=readr::read_csv,
  object = "2023/sujet2/diffusion/resultats/stat_group_cult_fm.csv",
  col_types = cols(code_group = col_character()),
  bucket = "projet-funathon",
  opts = list("region" = "")) %>% 
 select(code_group,libelle_groupe_culture,pct_surf) %>% 
  rename(pct_surf_fm = pct_surf)

# appariement des stas locales, départementales, nationales
stat_compar<-stat_fm %>% 
  left_join(stat_dep_pt %>% select(code_group, pct_surf_dep),by="code_group") %>% 
  left_join(stat_pt,by="code_group") %>% 
  select(libelle_groupe_culture,pct_surf_local,pct_surf_dep,pct_surf_fm) %>% 
  arrange(desc(pct_surf_local)) %>% adorn_totals() 

stat_compar %>% 
  setNames(c("Groupe de cultures","surf. locales (%)","surf. départ. (%)","surf. France m. (%)")) %>% kable(
    format="html",
    caption="<span style='font-size:medium'>Comparaison des surfaces locales, départemenales et nationales</span>",
    format.args = list(decimal.mark = ",", big.mark = " "),
    booktabs = TRUE) %>%
  kable_styling(font_size = 15) %>% 
  gsub("font-size: initial !important;",
       "font-size: 20pt !important;",.)%>%
  kable_styling(bootstrap_options = c("striped", "hover")) %>% 
  row_spec(nrow(stat_comp), bold = T, color = "white", background = "grey")

```

### Graphique de comparaison des cultures au niveau local, départemental et national

```{r}
#| label: faire un graphique comparant les structures
#| echo: false
#| fig-cap: différences de structure locale, departementale, nationale  

# je sélectionne les 10 groupes de cultures les plus répandus au niveau local 
tab<-stat_compar %>% filter(libelle_groupe_culture!="Total") %>% slice_head(n=10) %>% 
  rename(local=pct_surf_local, departement=pct_surf_dep, france=pct_surf_fm)

# je transpose la table pour rassembler toutes les valeurs dans une seule variable value (ggplot oblige)
tab_piv<-tab %>% pivot_longer(!libelle_groupe_culture) %>% rename(secteur=name) 

# je mets à 0 les valeurs manquantes
#tab_piv<-tab_piv %>% coalesce(value,0L)  
tab_piv[is.na(tab_piv)] <- 0

# levels(as.factor(tab_piv$secteur))
# tab_piv$secteur<-factor(tab_piv$secteur, levels=c("france","departement","local"))
# tab_piv<-tab_piv %>% arrange(desc(secteur), desc(value))

# ggplot => problème de tri : affichage des prairies avant le maïs ?    
p<-ggplot(tab_piv, aes(x = reorder(libelle_groupe_culture,+value), 
                       y = value, 
                       fill=factor(secteur, levels=c("france","departement","local")))) + 
  geom_col(position = "dodge") +
  labs(title="Surface par culture", x="Culture", y = "%", fill = "Secteur") +
  theme_classic()

# je flippe le graphique pour avoir des barres horizontales  
p+coord_flip()
```

### Je teste un graphique par secteur avec facet_wrap

```{r}
#| label: faire un graphique facet_wrap 
#| echo: false
#| fig-cap: différences de structure locale, departementale, nationale  

# je sélectionne les 10 groupes de cultures les plus répandus au niveau local 
tab<-stat_compar %>% filter(libelle_groupe_culture!="Total") %>% slice_head(n=10) %>% 
  rename(local=pct_surf_local, departement=pct_surf_dep, france=pct_surf_fm)

# je transpose la table pour rassembler toutes les valeurs dans une seule variable value (ggplot oblige)
tab_piv<-tab %>% pivot_longer(!libelle_groupe_culture) %>% rename(secteur=name) 

# je mets à 0 les valeurs manquantes
#tab_piv<-tab_piv %>% coalesce(value,0L)  
tab_piv[is.na(tab_piv)] <- 0

# ggplot => problème de tri : affichage des prairies avant le maïs ?    
ggplot(tab_piv, aes(x = reorder(libelle_groupe_culture,+value), 
                       y = value)) + 
  geom_col(fill = "lightblue", colour = "black",position = "dodge") +
  labs(title="Surface par culture", x="Culture", y = "%", fill = "Secteur") +
  geom_text(aes(label = value), hjust = -0.3, size = 8/.pt, colour = "black") +
  theme_classic() + coord_flip() + 
  facet_wrap(~secteur,nrow=3,scales='free')
```

### Pour aller plus loin, comparer la taille moyenne des parcelles selon les secteurs 

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
